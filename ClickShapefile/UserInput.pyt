# -*- coding: utf-8 -*-import arcpyclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        param0 =arcpy.Parameter(            displayName="Input Name",            name="PointName",            datatype="GPString",            parameterType="Required",            direction="Input")                    param1=arcpy.Parameter(            displayName="Input Refrance Name",            name="RefranceName",            datatype="GPString",            parameterType="Required",            direction="Input")        param2=arcpy.Parameter(            displayName="Input Refrance Name",            name="CobineName",            datatype="GPString",            parameterType="Derived",            direction="Output")        param2.parameterDependencies= [param0.name,param0.name]        #param2.schema.clone=True        return [param0,param1,param2]    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        Name= parameters[0].valueAsText        RefName= parameters[1].valueAsText        messages.AddMessage(f"{Name} Point.")        messages.addMessage(f"{RefName}  Point.")        result=f"{Name}:{RefName}"        arcpy.SetParameter(2,result)        return     def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return